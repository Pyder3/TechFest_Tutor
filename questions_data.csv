question_id,difficulty,question,test_cases,time_complexity
164,easy,O(n + m),[],O(n + m)
165,easy,"### Problem Statement:

Given an array of integers where each element represents the maximum number of steps that can be made forward from that element, write a function to return the minimum number of jumps to reach the end of the array (starting from the first element). If an element is 0, then you cannot move through that element. If it's not possible to reach the end of the array, return -1.

### Input Format:

- The first line contains a single integer `N`, the size of the array.
- The second line contains `N` space-separated integers, the elements of the array.

#### Example:

**Input:**

```
6
1 3 5 8 9 2 6 7 6 8 9
```

**Explanation:**

- `N = 6` is the size of the array.
- `1 3 5 8 9 2 6 7 6 8 9` are the elements in the array representing the maximum steps that can be moved forward from each position.

### Expected Time Complexity:

","[{'input': '51 4 3 2 6 7', 'output': '2'}, {'input': '41 2 0 3', 'output': '-1'}, {'input': '32 1 1', 'output': '1'}, {'input': '610 9 8 7 6 5', 'output': '1'}, {'input': '81 3 5 8 9 2 6 7', 'output': '3'}]",O(n)
166,medium,"### Problem Statement:

Given an array of integers `arr`, you are required to find the length of the longest subarray with a sum equal to `k`. A subarray is a contiguous part of an array. You can assume that the array contains both positive and negative integers.

#### Example:

- Input: `arr = [1, -1, 5, -2, 3], k = 3`
- Output: `4`

Explanation: The subarray `[1, -1, 5, -2]` sums to 3, and its length is 4, which is the longest length with sum equal to `k`.

### Expected Input Format:

- The first line of the input contains a single integer `n`, the size of the array.
- The second line contains `n` space-separated integers, the elements of the array `arr`.
- The third line contains the integer `k`, the target sum for the subarrays.

#### Example:
```
5
1 -1 5 -2 3
3
```

### Ideal Time Complexity:

","[{'input': '42 3 -2 14', 'output': '2'}, {'input': '51 2 3 -3 45', 'output': '4'}, {'input': '7-1 2 -3 4 1 -6 86', 'output': '5'}, {'input': '3-1 -2 -3-6', 'output': '3'}, {'input': '61 1 1 1 1 13', 'output': '3'}]",O(n)
167,medium,"### Problem Statement:
You are given a non-empty array of integers, where each element represents the maximum number of steps that can be jumped going forward from that element. Write a function to return the minimum number of jumps you must take to reach the end of the array. You can assume that you can always reach the end of the array.

### Input Format:
- The first line of input represents the number of elements in the array, `n`.
- The second line contains `n` space-separated integers representing the elements of the array.

### Example:
#### Input:
```
5
1 3 5 8 9
```
#### Output:
```
3
```
### Explanation:
Starting at the first element (1), jump one step to the second element, then three steps to the fifth element, reaching the end of the array in 3 jumps.

","[{'input': '42 3 1 1', 'output': '2'}, {'input': '61 2 1 1 1 4', 'output': '4'}, {'input': '33 2 1', 'output': '1'}, {'input': '71 4 3 7 1 2 6', 'output': '2'}, {'input': '510 9 8 7 6', 'output': '1'}]",O(n)
